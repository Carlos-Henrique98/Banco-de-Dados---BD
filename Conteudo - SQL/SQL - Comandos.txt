==========================================
   	| SQL Server (T-SQL) |
==========================================
*SGBD(SQL STUDIO) - GERENCIA

*SQL SERVER - GUARDA (LOCAL)
------------------------------------------------
	    [ SGBDR ]

*Sistema Gerenciador de Banco de Dados
Relacional
*Trata-se de um sistema de gerenciamento
de bancos de dados baseado no modelo relacional
introduzido por E. F. Codd.

Composição de um Banco de Dados

*Tabelas;
*Campos(Colunas);
*Registros(Linhas);
------------------------------------------------
 - Tabelas

*Objetos onde são armazenados os dados em 
um banco de dados relacional

*Uma tabela é uma coleção de entradas de 
dados relacionados e consiste em linhas e 
colunas.
-----------------------------------------------
 - Campo

*São entidades que representam os atributos
dos dados, como Nome,Data de Nascimento,
Salário, Preco.

*Um campo é uma coluna em uma tabela que 
mantém informações especificas sobre cada
registro.
-----------------------------------------------
 - Registro

* Linha, ou Tupla

*Cada entrada individual em uma tabela. 
Trata-se de um conjunto de campos relacionados
que caracterizam os dados de uma entidade única.
------------------------------------------------
 - Criacao de um Banco de Dados

CREATE DATABASE db_Biblioteca
ON PRIMARY (NAME = db_Biblioteca,
FILENAME='C:\SQL\db_Biblioteca.MDF',
SIZE=6MB,
MAXSIZE =10MB,
FILEGROWTH=10%
)
------------------------------------------------
 - USE

*O comando USE instrui o SGBDR a utilizar o
banco de dados especificado para rodar os comandos

*Sintaxe:
USE banco_de_dados
--------------------------------------------------
 - sp_helpdb

 Informa o tamanho, taxa de crescimento, e o local
do banco de dados.

sp_helpdb NOME_BANCO_DADOS
--------------------------------------------------
 - SQL Constraints (Restrições)

*Restrições são regras aplicadas nas colunas de uma 
tabela.
*São usadas para limitar os tipos de dados que são
inseridos.
*Podem ser especificados no momento de criação da 
tabela (CREATE) ou após a tabela ter sido criada
(ALTER).

===================================================
	 - SQL Constraints (RESTRIÇÕES)
===================================================

Principais

*NOT NULL
*UNIQUE
*PRIMARY KEY
*FOREIGN KEY
*CHECK
*DEFAULT

===================================================
		   - NOT NULL
===================================================

* A constraint NOT NULL impõe a uma coluna a 
NÃO aceitar valores NULL.

* A constraint NOT NULL obriga um campo a sempre
possuir um valor.

* Deste modo, não é possivel inserir um registro
(ou atualizar) sem entrar com um valor neste campo.

====================================================
		  - UNIQUE
====================================================
*A restrição UNIQUE identifica de forma única cada
registro em uma tabela de um banco de dados

*As constraints UNIQUE e PRIMARY KEY garantem a unicidade
em uma coluna ou conjunto de colunas.

*Uma constraint PRIMARY KEY automaticamente possui uma 
restrição UNIQUE definida.

*Você pode ter várias constraints UNIQUE em uma tabela,
mas apenas uma Chave Primária por tabela.

======================================================
    		- PRIMARY KEY
======================================================

* A PRIMARY KEY identifica de forma única cada registro
em uma tabela de banco de dados.

* Chaves Primárias devem conter valores únicos.

* Uma coluna de chave primária não pode conter valores NULL.

* Cada tabela deve ter uma chave primária e apenas uma chave
primária. 

=======================================================
        	   - FOREIGN KEY
=======================================================

*Uma FOREIGN KEY (Chave Estrangeira) em uma tabela é um
campo que aponta para uma chave primária em outra tabela.

CONSTRAINT fk_ID_Autor FOREIGN KEY (ID_Autor) REFERENCES
tbl_autores(ID_Autor)

Neste exemplo a chave primária está na tabela tbl_autores
e uma chave estrangeira de nome ID_Autor foi criada na 
tabela atual, usando o nome fk_ID_Autor

========================================================
		    - CHECK
========================================================

*A constraint CHECK é usada para limitar uma faixa de 
valores que podem ser colocadas em uma coluna.

*Se uma constraint CHECK for definida em uma única coluna
ela permitirá apenas determinados valores para a coluna.

*Se a constraint CHECK for definida para a tabela, ela 
poderá limitar os valores em algumas colunas com base nos
valores de outras colunas do registro.

========================================================
		    - DEFAULT
=======================================================
* A restrição DEFAULT é usada para inserir um valor padrão
em uma coluna.
 
* O valor padrão será adicionado a todos os novos registros
caso nenhum outro valor seja especificado.
------------------------------------------
DDL - Linguagem De Definicao de Dados
------------------------------------------
CREATE DATABASE - Criar um Banco
CREATE TABLE - Criar Tabelas
ALTER TABLE - Alterar Tabelas
TRUNCATE TABLE - Apagar dados da tabela
DROP TABLE - Apaga tabela

------------------------------------------
DML - Linguagem De Manipulação de Dados
------------------------------------------
INSERT - Incluir Dados
DELETE - Deleta os dados da coluna
UPDATE - Alterar dados

------------------------------------------
DQL - Linguagem De Consulta de Dados
------------------------------------------
São os comandos de consulta de dados
SELECT * FROM Table - Selecionar dados

------------------------------------------
           - SELECT DISTINCT
------------------------------------------
Algumas colunas podem conter valores duplicados.
Para exibir apenas valores diferentes ("distintos"),
use a palavra-chave DISTINCT:

SELECT DISTINCT colunas
FROM tabela

SELECT DISTINCT ID_Autor
FROM tbl_Livro


------------------------------------------
	   - CLÁUSULA WHERE
------------------------------------------
Permite filtrar registros em uma consulta

SELECT colunas FROM tabela WHERE coluna = valor

Ex.: SELECT * FROM tbl_Livro WHERE ID_Autor = '1'

SELECT ID_Autor FROM tbl_autores WHERE Sobrenome_Autor = 'Stanek'

-------------------------------------------
    	   - Operadores AND e OR
-------------------------------------------
*Usados para filtrar registros baseados em mais de 
uma condição;

*O operador AND mostra um registro se ambas as condições
forem verdadeiras;

*O operador OR mostra um registro se pelo menos uma das 
condições for verdadeira;

- Exemplo - Operadores AND e OR

 SELECT * FROM tbl_Livro
 WHERE ID_Livro > 2 AND ID_Autor < 3

 SELECT * FROM tbl_Livro
 WHERE ID_Livro > 2 OR ID_Autor < 3

---------------------------------------------
	    - Comando UPDATE
---------------------------------------------
UPDATE tabela
SET coluna = valor

UPDATE nome_tabela
SET coluna = valor
WHERE filtro 

UPDATE tbl_livros        --UPDATE nome_Tabela
SET Preco_Livro = 65.45  --SET trocar_preco da coluna Preco_Livro
wHERE ID_Livro = 102;	 --WHERE Localizar o valor 102 do ID_Livro

//Alterar mais de uma coluna
UPDATE tbl_livros
SET Preco_Livro = 80.00,
ISBN = '0202020'
WHERE ID_Livro = 101;

-----------------------------------------------
	     - SELECT TOP
-----------------------------------------------
*Usado para especificar o número de registros 
a retornar;

*Util para tabelas com muitos registros

SELECT TOP número|percentual colunas
FROM tabela

SELECT TOP 10 PERCENT Nome_Livro
FROM tbl_Livro

SELECT TOP 2 Nome_Livro
FROM tbl_Livro

------------------------------------------------
	      - SQL ALIAS
------------------------------------------------

Pode-se dar um nome diferente a uma coluna ou tabela
em uma consulta.

SELECT colunas
AS nome_alias
FROM tabela

SELECT Nome_Livro
AS Livro
FROM tbl_Livro

USE db_Biblioteca
SELECT Nome_Livro
AS Livro, ID_autor AS Autor
FROM tbl_Livro

-------------------------------------------------
	       - Operador UNION
-------------------------------------------------
  Permite combinar duas ou mais declarações SELECT.

  Cada declaração SELECT deve ter o mesmo número de 
colunas, tipos de dados e ordem das colunas

SELECT colunas FROM tabela1
UNION
SELECT colunas FROM tabela2

SELECT ID_Autor FROM tbl_autores UNION
SELECT ID_Autor FROM tbl_Livro

SELECT ID_Autor FROM tbl_autores
UNION ALL
SELECT ID_Autor FROM tbl_livro

--------------------------------------------------
		- SELECT INTO
--------------------------------------------------
 Seleciona dados de uma ou mais tabelas e os insere em
uma tabela diferente.

Pode ser usada para criar cópias de backup de tabelas

SELECT *
INT nova_tabela
FROM tabela_atual

SELECT Nome_Livro,ID_Autor
INTO LivroAutor
FROM tbl_Livro
WHERE ID_Livro > 2

----------------------------------------------------
		- Funções Agregadas
----------------------------------------------------

MIN - Valor Minimo
MAX - Valor Maximo
AVG - Media Aritmetica
SUM - Total (Soma)
COUNT - Contar quantidade de item

Exemplo:

SELECT COUNT(*) FROM tbl_autores

SELECT MAX (Preco_Livro) FROM tbl_Livro

SELECT MIN (Preco_Livro) FROM tbl_Livro

SELECT SUM (Preco_Livro) FROM tbl_Livro

-----------------------------------------------------
	    - BETWEEN - SELECAO DE INTERVALO
-----------------------------------------------------

SELECT colunas FROM tabela
WHERE coluna BETWEEN valor1 AND valor2

SELECT * FROM tbl_Livro
WHERE Data_Pub BETWEEN '20040517' AND '20100517'

SELECT Nome_Livro AS Livro, Preco_Livro AS Preco
FROM tbl_Livro
WHERE Preco_Livro BETWEEN 40.00 AND 60.00

----------------------------------------------------
		LIKE E NOT LIKE
----------------------------------------------------
*Determina se uma cadeia de caracteres especifica corresponde
a uma padrao especificado. Um padrao pode incluir caracteres
normais e curingas

*NOT LIKE inverte a comparação, verificando se a cadeia 
de caracteres NAO corresponde ao padrão especificado.

Usando junto com WHERE

Ex.:

WHERE coluna LIKE padrao

 LIKE - Padrões especificos

'%' - Qualquer cadeia de 0 ou mais caracteres

'_' - Sublinhado: qualquer caracter único

'[]' - Qualquer caracter único no intervalo ou conjunto
especificado ([a-h];[aeiou])

'[^]' - Qualquer caracter único que não esteja no intervalo
ou conjunto especificado ([a-h]; [aeiou])

-------------------------------------------------------
		       - JOINS
-------------------------------------------------------
A palavra-chave JOIN é usada para obter dados provenientes
de duas ou mais tabelas, baseado em um relacionamento entre 
colunas nestas tabelas.

 * INNER JOIN: Retorna linhas quando houver pelo menos uma
correspondencia em ambas as tabelas.

 * OUTER JOIN: Retorna linhas mesmo quando não houver pelo
menos uma correspondência em uma das tabelas (ou ambas). O
OUTER JOIN divide em LEFT JOIN, RIGHT JOIN e FULL JOIN.

SELECT colunas
FROM tabela1
INNER JOIN tabela2
ON tabela1.coluna = tabela2.coluna

Ex.:
SELECT * FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

SELECT tbl_Livro.Nome_Livro,tbl_Livro.ISBN,
tbl_autores.Nome_Autor
FROM tbl_Livro
INNER JOIN tbl_autores
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

Usando Aliases:
SELECT L.Nome_Livro, E.Nome_editora
FROM tbl_Livro AS L
INNER JOIN tbl_editoras AS E
ON L.ID_editora = E.ID_editora

===========================================================
		       OUTER JOINS
===========================================================

LEFT JOIN: Retorna todas as linhas da tabela à esquerda, 
mesmo se não houver nenhuma correspondencia na tabela à 
direita.

RIGHT JOIN: Retorna todas as linhas da tabela à direita, 
mesmo se não houver nenhuma correspondência na tabela à
esquerda.

FULL JOIN: Retorna linhas quando houver uma correspondencia
em qualquer uma das tabelas. É uma combinação de LEFT e 
RIGHTS JOINS.

 - LEFT JOIN

SELECT coluna
FROM tabela_esq
LEFT (OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna

EX.:
SELECT * FROM tbl_autores
LEFT JOIN tbl_Livro
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor

 - LEFT JOIN excluindo correspondencias

SELECT coluna
FROM tabela_esq
LEFT(OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna
WHERE tabela_dir.coluna IS NULL

SELECT * FROM tbl_autores
LEFT JOIN tbl_Livro
ON tbl_Livro.ID_Autor = tbl_autores.ID_Autor
WHERE tbl_Livro.ID_Autor IS NULL

 - RIGHT JOIN

SELECT colunas
FROM tabela_esq
RIGHT (OUTER)JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna

EX.:
SELECT * FROM tbl_Livro AS Li
RIGHT JOIN tbl_editos AS Ed
ON Li.ID_editora = Ed.ID_editora

 - RIGHT JOIN excluindo correspondencias

SELECT coluna
FROM tabela_esq
RIGHT(OUTER) JOIN tabela_dir
ON tabela_esq.coluna = tabela_dir.coluna
WHERE tabela_esq.coluna IS NULL

SELECT * FROM tbl_Livro
RIGHT JOIN tbl_editoras
ON tbl_Livro.ID_editora = tbl_editoras.ID_editora
WHERE tbl_Livro.ID_editora IS NULL

====================================================
		     FULL JOIN
====================================================
Combinação de RIGHT JOIN com LEFT JOIN, retornando
registros que não possuam correspondências em ambas
as tabelas.

SELECT colunas
FROM tabela1
FULL (OUTER) JOIN tabela2
ON tabela1.coluna = tabela2.coluna

 - FULL JOIN exlcuindo correspondência

SELECT colunas
FROM tabela1
FULL (OUTER) JOIN tabela2
ON tabela1.coluna = tabela2.coluna
WHERE tabela1.coluna IS NULL
OR tabela2.coluna IS NULL

====================================================
	   IN: Filtro de Múltiplas Condições
====================================================
Determina se um determinado valor corresponde a qualquer
valor em uma sobconsulta ou lista.
Retorna sempre TRUE ou FALSE

Sintaxe:
Expressao_teste(NOT) IN (subconsulta | lista)

SELECT * FROM tbl_Livro
WHERE ID_Autor IN (1,2) //Só aparece IDs com valor - 1 e 2

SELECT * FROM tbl_Livro
WHERE ID_Autor NOT IN (1,2) //Não aparece Ids com valor - 1 e 2

====================================================
		CAMPOS CALCULADOS
====================================================

CREATE TABLE Produtos(
codProduto smallint,
NomeProduto varchar(20),
Preco money,
Quant smallint, 
Total AS (Preco * Quant)
);

INSERT INTO Produtos VALUES (1, 'Mouse', 15.00, 2);
INSERT INTO Produtos VALUES (2, 'Teclado', 18.00,1);
INSERT INTO Produtos VALUES (3, 'Fones', 25.00, 1);
INSERT INTO Produtos VALUES (4, 'PenDrive', 25.00, 3);
INSERT INTO Produtos VALUES (5, 'DVD-R', 1.30, 12);

=====================================================
		     CREATE INDEX
=====================================================

Permitem que as aplicações de BAncos de Dados encontrem
os dados mais rapidamente, sem ter de ler a tabela toda.

Os usuarios não vêem os índices

CREATE INDEX

Obs.: Apenas crie índices em tabelas que recebam muitas 
consultas; tabelas indexadas levam mais tempo para serem 
atualizadas

CREATE INDEX nome_indice
ON nome_tabela (nome_coluna)